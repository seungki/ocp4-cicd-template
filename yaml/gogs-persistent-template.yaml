kind: Template
apiVersion: v1
metadata:
  annotations:
    description: The Gogs git server with persistent storage (https://gogs.io/)
    tags: instant-app,gogs,go,golang
  name: gogs
objects:
#PersistentVolume Gogs Postgresql
- kind: PersistentVolume
  apiVersion: v1
  metadata:
    name: ${PROJECT_NAME}-${GOGS_SERVICE_NAME}-postgres-data
  spec:
    capacity:
      storage: 5Gi
    accessModes:
    - ReadWriteOnce
    nfs:
      path: ${GOGS_POSTGRESQL_DATA_DIRECTORY}
      server: ${PERSISTENT_VOLUME_IP}
    persistentVolumeReclaimPolicy: Retain
#PersistentVolume Gogs
- kind: PersistentVolume
  apiVersion: v1
  metadata:
    name: ${PROJECT_NAME}-${GOGS_SERVICE_NAME}-data
  spec:
    capacity:
      storage: 1Gi
    accessModes:
    - ReadWriteOnce
    nfs:
      path: ${GOGS_DATA_DIRECTORY}
      server: ${PERSISTENT_VOLUME_IP}
    persistentVolumeReclaimPolicy: Retain    
#PersistentVolumeClaim Gogs Postgresql
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: gogs-postgres-data
    labels:
      app: ${GOGS_SERVICE_NAME}
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: ${DB_VOLUME_CAPACITY}
    volumeName: ${PROJECT_NAME}-${GOGS_SERVICE_NAME}-postgres-data     
#PersistentVolumeClaim Gogs
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: gogs-data
    labels:
      app: ${GOGS_SERVICE_NAME}
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: ${GOGS_VOLUME_CAPACITY}
    volumeName: ${PROJECT_NAME}-${GOGS_SERVICE_NAME}-data    
#DeploymentConfig Gogs Postgresql
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${GOGS_SERVICE_NAME}-postgresql
    labels:
      app: ${GOGS_SERVICE_NAME}
      app.kubernetes.io/component: database
      app.kubernetes.io/instance: ${GOGS_SERVICE_NAME}
      app.kubernetes.io/name: ${GOGS_SERVICE_NAME}-postgresql
      app.kubernetes.io/part-of: ${GOGS_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      name: ${GOGS_SERVICE_NAME}-postgresql
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${GOGS_SERVICE_NAME}-postgresql
        name: ${GOGS_SERVICE_NAME}-postgresql
      spec:
        serviceAccountName: ${GOGS_SERVICE_NAME}
        containers:
        - env:
          - name: POSTGRESQL_USER
            value: ${DATABASE_USER}
          - name: POSTGRESQL_PASSWORD
            value: ${DATABASE_PASSWORD}
          - name: POSTGRESQL_DATABASE
            value: ${DATABASE_NAME}
          - name: POSTGRESQL_MAX_CONNECTIONS
            value: ${DATABASE_MAX_CONNECTIONS}
          - name: POSTGRESQL_SHARED_BUFFERS
            value: ${DATABASE_SHARED_BUFFERS}
          - name: POSTGRESQL_ADMIN_PASSWORD
            value: ${DATABASE_ADMIN_PASSWORD}
          image: ' '
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
            failureThreshold: 10
            periodSeconds: 20
          name: postgresql
          ports:
          - containerPort: 5432
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U ${POSTGRESQL_USER} -q -d ${POSTGRESQL_DATABASE} -c 'SELECT 1'
            initialDelaySeconds: 30
            timeoutSeconds: 1
            failureThreshold: 10
          resources:
            limits:
              memory: 512Mi
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: gogs-postgres-data
        volumes:
        - name: gogs-postgres-data
          persistentVolumeClaim:
            claimName: gogs-postgres-data
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:${DATABASE_VERSION}
          namespace: openshift
      type: ImageChange
    - type: ConfigChange        
#DeploymentConfig Gogs
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    labels:
      app: ${GOGS_SERVICE_NAME}
      app.kubernetes.io/component: gogs
      app.kubernetes.io/instance: ${GOGS_SERVICE_NAME}
      app.kubernetes.io/name: gogs
      app.kubernetes.io/part-of: ${GOGS_SERVICE_NAME}
    name: ${GOGS_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      app: ${GOGS_SERVICE_NAME}
      deploymentconfig: ${GOGS_SERVICE_NAME}
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${GOGS_SERVICE_NAME}
          deploymentconfig: ${GOGS_SERVICE_NAME}
      spec:
        serviceAccountName: ${GOGS_SERVICE_NAME}
        containers:
        - image: " "
          imagePullPolicy: Always
          name: ${GOGS_SERVICE_NAME}
          ports:
          - containerPort: 3000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - name: gogs-data
            mountPath: /opt/gogs/data
          - name: gogs-config
            mountPath: /etc/gogs/conf
          readinessProbe:
              httpGet:
                path: /
                port: 3000
                scheme: HTTP
              initialDelaySeconds: 40
              timeoutSeconds: 1
              periodSeconds: 20
              successThreshold: 1
              failureThreshold: 10
          livenessProbe:
              httpGet:
                path: /
                port: 3000
                scheme: HTTP
              initialDelaySeconds: 40
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 10
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: gogs-data
          persistentVolumeClaim:
            claimName: gogs-data
        - name: gogs-config
          configMap:
            name: gogs-config
            items:
              - key: app.ini
                path: app.ini
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${GOGS_SERVICE_NAME}
        from:
          kind: ImageStreamTag
          name: ${GOGS_SERVICE_NAME}:${GOGS_VERSION}
      type: ImageChange
#ImageStream Gogs
- kind: ImageStream
  apiVersion: v1
  metadata:
    labels:
      app: ${GOGS_SERVICE_NAME}
    name: ${GOGS_SERVICE_NAME}
  spec:
    tags:
    - name: "${GOGS_VERSION}"
      from:
        kind: DockerImage
        name: quay.io/siamaksade/gogs:${GOGS_VERSION}
      importPolicy: {}
      annotations:
        tags: gogs,go,golang
        version: "${GOGS_VERSION}"

#ConfigMap
- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: gogs-config
    labels:
      app: ${GOGS_SERVICE_NAME}
  data:
    app.ini: |
      RUN_MODE = prod
      RUN_USER = gogs

      [database]
      DB_TYPE  = postgres
      HOST     = ${GOGS_SERVICE_NAME}-postgresql:5432
      NAME     = ${DATABASE_NAME}
      USER     = ${DATABASE_USER}
      PASSWD   = ${DATABASE_PASSWORD}

      [repository]
      ROOT = /opt/gogs/data/repositories

      [server]
      ROOT_URL=http://${HOSTNAME}
      SSH_DOMAIN=${HOSTNAME}

      [security]
      INSTALL_LOCK = ${INSTALL_LOCK}

      [service]
      ENABLE_CAPTCHA = false

      [webhook]
      SKIP_TLS_VERIFY = ${SKIP_TLS_VERIFY}        
#ServiceAccount
- kind: ServiceAccount
  apiVersion: v1
  metadata:
    creationTimestamp: null
    labels:
      app: ${GOGS_SERVICE_NAME}
    name: ${GOGS_SERVICE_NAME}
#Service Gogs Postgresql
- kind: Service
  apiVersion: v1
  metadata:
    annotations:
      description: Exposes the database server
    name: ${GOGS_SERVICE_NAME}-postgresql
    labels:
      app: ${GOGS_SERVICE_NAME}
  spec:
    ports:
    - name: postgresql
      port: 5432
      targetPort: 5432
    selector:
      name: ${GOGS_SERVICE_NAME}-postgresql
#Service Gogs
- kind: Service
  apiVersion: v1
  metadata:
    labels:
      app: ${GOGS_SERVICE_NAME}
    name: ${GOGS_SERVICE_NAME}
  spec:
    ports:
    - name: 3000-tcp
      port: 3000
      protocol: TCP
      targetPort: 3000
    selector:
      app: ${GOGS_SERVICE_NAME}
      deploymentconfig: ${GOGS_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
#Route Gogs
- kind: Route
  apiVersion: v1
  id: ${GOGS_SERVICE_NAME}-http
  metadata:
    labels:
      app: ${GOGS_SERVICE_NAME}
    name: ${GOGS_SERVICE_NAME}
  spec:
    host: ${HOSTNAME}
    to:
      name: ${GOGS_SERVICE_NAME}
parameters:
    - name: GOGS_SERVICE_NAME
      description: The name for the application.
      required: true
      value: gogs
    - name: HOSTNAME
      description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <application-name>-<project>.<default-domain-suffix>'
      required: true
    - name: GOGS_VOLUME_CAPACITY
      description: Volume space available for data, e.g. 512Mi, 2Gi
      required: true
      value: 1Gi
    - name: DB_VOLUME_CAPACITY
      description: Volume space available for postregs data, e.g. 512Mi, 2Gi
      required: true
      value: 1Gi
    - name: DATABASE_USER
      from: gogs
      value: gogs
      displayName: Database Username
    - name: DATABASE_PASSWORD
      from: '[a-zA-Z0-9]{8}'
      value: gogs
      displayName: Database Password
    - name: DATABASE_NAME
      displayName: Database Name
      value: gogs
    - name: DATABASE_ADMIN_PASSWORD
      from: '[a-zA-Z0-9]{8}'
      generate: expression
      displayName: Database Admin Password
    - name: DATABASE_MAX_CONNECTIONS
      displayName: Maximum Database Connections
      value: "100"
    - name: DATABASE_SHARED_BUFFERS
      displayName: Shared Buffer Amount
      value: 12MB
    - name: DATABASE_VERSION
      displayName: Database version (PostgreSQL)
      value: "10"
    - name: GOGS_VERSION
      displayName: Gogs Version
      description: 'Version of the Gogs container image to be used (check the available version https://hub.docker.com/r/openshiftdemos/gogs/tags)'
      value: "stable"
      required: true
    - name: INSTALL_LOCK
      displayName: Installation lock
      description: 'If set to true, installation (/install) page will be disabled. Set to false if you want to run the installation wizard via web'
      value: "true"
    - name: SKIP_TLS_VERIFY
      displayName: Skip TLS verification on webhooks
      description: Skip TLS verification on webhooks. Enable with caution!
      value: "false"
    - name: GOGS_POSTGRESQL_DATA_DIRECTORY
      displayName: Postgresql data directory
      description:  PersistentVolume for Postgresql data directory
      value: /shared/cicd-sample/gogs-postgres-data
    - name: GOGS_DATA_DIRECTORY
      displayName: Gogs data directory
      description:  PersistentVolume for Gogs data directory
      value: /shared/cicd-sample/gogs-data  
    - name: PERSISTENT_VOLUME_IP
      displayName: PersistentVolume IP Address
      description:  IP Address of PersistentVolume
      value: 192.168.138.12   
    - name: PROJECT_NAME
      displayName: Project Name
      description:  Project Name 
      value: cicd-sample  
  